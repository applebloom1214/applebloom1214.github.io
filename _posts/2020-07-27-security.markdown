---
layout: post
title:  "주요 기능 - 회원 등록, 로그인, 로그아웃"
---
## ※ 개관

 ![Gatok Jekyll Theme]({{site.baseurl}}/images/2-4.png)
 
 웹기반 프로젝트에서 회원가입/로그인/로그아웃을 구현시 쿠키나 세션 등을 사용하는데, <br>
 본 프로젝트는 SPRING에 최적화된 보안 프레임워크인 SPRING SECURITY를 사용하여 이를 구현하였다.<br>
 SPRING SECURITY는 여러 종류의 필터와 인터셉터를 사용하며 내부적으로 보안 처리를 해준다.
<br><br>
 공통 과정<br>
 ~~~java
 //web.xml
 	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
 // springSecurityFilterChain은 DelegatingFilterProxy 필터를 통해 서버로 들어오는 모든 요청을 감싸서 처리한다.

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
 ~~~
 <br>
## ※ 회원가입 동작 과정 및 주요 메소드<br>
 ■ 회원가입 요청 > 컨트롤러 > 서비스 & 구현 > Mybatis(DAO구현) > DB > 컨트롤러 > VIEW로 반환<br> 
 <br>
 스프링 시큐리티 접근제한<br>
 ~~~c
//header2.jsp
<sec:authorize access="isAnonymous()"> // 모든 사람에게 허용
	<button type="submit" data-oper='sign' class="btn btn-danger"
		id="header">등록</button>
	<button type="submit" data-oper='login' class="btn btn-success"
		id="header">로그인</button>
</sec:authorize>
<sec:authorize access="isAuthenticated()"> // 인가된 사람에게만 허용

	<button type="submit" data-oper='logout' class="btn btn-success"
		id="header">로그아웃</button>
	<input type="hidden" name="${_csrf.parameterName}"
		value="${_csrf.token}" /></sec:authorize>// csrf 공격 방지 
 ~~~
 
 <br>
회원가입 입력값 체크<br>

~~~c
//sign.jsp
$('#btnsign').on("click", function(e){
		    
	e.preventDefault();
		    var userid = $("#userid").val();
		    if(userid.length != 0) userid = 1;
		    userid = parseInt(userid) || 0;
		    console.log(userid);
		    // 입력값이 없으면 0으로 초기화
		    
		    var userpw = $("#userpw").val();
		    if(userpw.length != 0) userpw = 3;
		    userpw = parseInt(userpw) || 0;
		    console.log(userpw);
		    
		    var userName = $("#userName").val();
		    if(userName.length != 0) userName = 5;
		    userName = parseInt(userName) || 0;
		    console.log(userName);
		   
		    var testSign = userid + userpw + userName;
		    console.log(testSign);
		    
		    if(testSign == 4){
		    	alert('닉네임을 입력해주세요');
		    	return;
		    }else if(testSign ==6){
		    	alert('패스워드를 입력해주세요');
		    	return;
		    }else if(testSign ==8){
		    	alert('아이디를 입력해주세요');
		    	return;
		    }else if(testSign ==9){
		    	formObj.submit();
		    }else{
		    	alert('항목을 모두 입력해주세요');
		    	return;
		    }
		        //계산을 통해 미입력 값 체크
		    });		 						

					});//end
~~~
  <br>
중복 아이디 체크<br>
~~~c
//BoardServiceImpl.java
	@Override
	public int idCheck(MemberVO mem) {
		
		mem.setUserpw(pwencoder.encode(mem.getUserpw()));
		// BCryptPasswordEncoder(pwencoder)를 통해 비밀번호를 암호화시킨 후 VO의 비밀번호를 수정한다.
		if(mapper.idCheck(mem) != null) {
		// mapper에 등록된 idCheck SQL을 통해 같은 이름(PK로 설정됨)으로 등록되었는지 확인한다.	
			return 0;
		}else {
			return 1;
		}
		
	}
~~~
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/2-5.PNG)<br>
 비밀번호가 암호화되었다.<br>
 
  <br>
## ※ 로그인 동작 과정 및 주요 메소드<br>
  ■ 로그인 요청 > 컨트롤러 > 서비스 & 구현 > Mybatis(DAO구현) > 인증 및 인가 > 컨트롤러 > VIEW로 반환<br> 
 <br>
 <br>
 시큐리티 기본 설정<br>
 ~~~c
 //security-context.xml
 <security:form-login login-page="/login" /> // /login을 로그인 페이지로 지정
 	<security:authentication-manager> // 인증을 담당하고 있는 시큐리티 컴포넌트

		<security:authentication-provider
			user-service-ref="customUserDetailsService">//원하는 객체를 인증과 권한 체크에 활용할 수 있게함

			<security:password-encoder
				ref="bcryptPasswordEncoder" />

		</security:authentication-provider>

	</security:authentication-manager>
 ~~~
 <br>
  내부 인증 과정 1<br>
 ~~~c
 @Log4j
public class CustomUserDetailsService implements UserDetailsService {
// CustomUserDetailsService는 UserDetailsService를 구현하여 사용자 정보를 가져옴
	@Setter(onMethod_ = { @Autowired })
	private MemberMapper memberMapper;
        // 사용자 정보를 가져오기 위한 DAO
	@Override
	public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {

		log.warn("Load User By UserName : " + userName);

		// userName means userid
		MemberVO vo = memberMapper.read(userName);

		log.warn("queried by member mapper: " + vo);

		return vo == null ? null : new CustomUser(vo);
		// 가져오는 데 성공하면 VO를 주입하여 CustomUser를 생성하여 권한을 인가해준다. 
	} 

}
 ~~~
  <br>
  내부 인증 과정 2<br>
~~~c
@Getter
public class CustomUser extends User {

	private static final long serialVersionUID = 1L;

	private MemberVO member;

	public CustomUser(String username, String password, 
			Collection<? extends GrantedAuthority> authorities) {
		super(username, password, authorities);
	}

	public CustomUser(MemberVO vo) {

		super(vo.getUserid(), vo.getUserpw(), vo.getAuthList().stream()
				.map(auth -> new SimpleGrantedAuthority(auth.getAuth())).collect(Collectors.toList()));
                // 한 사용자는 여러 권한을 가질 수 있어서 STREAM의 MAP 이용해 CustomUser를 생성한다.
		this.member = vo;
	}
}
~~~
<br><br>
## ※ 로그아웃 동작 과정 및 주요 메소드<br>
  ■ 로그아웃 요청 > 컨트롤러 > 서비스 & 구현 > Mybatis(DAO구현) > 내부 로그아웃 처리 > 컨트롤러 > VIEW로 반환<br> 
 <br>
 <br>
 시큐리티 기본 설정<br>
 ~~~c
 //security-context.xml
 <security:logout logout-url="/customLogout" // /customLogout 페이지에서 세션과 쿠키를 삭제하여 로그아웃을 처리
	invalidate-session="true" delete-cookies="JSESSION_ID" logout-success-url="/"/>
 ~~~
   <br>
  내부 인증 과정 2<br>
  ~~~c
  //CommonController.java
     //GET OR POST 어느 요청으로 들어와도 내부 로그아웃 처리를 해준다
 	@GetMapping("/customLogout")
	public void logoutGET() {

		log.info("custom logout");
	}

	@PostMapping("/customLogout")
	public String logoutPost() {

		log.warn("post custom logout");
		return "redirect:/happy/list";
	} 
  ~~~
  <br>
  
## ※ 실기 영상<br>
 회원가입<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1.gif)
 <br><br>
 로그인 & 로그아웃<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/2.gif)
 
