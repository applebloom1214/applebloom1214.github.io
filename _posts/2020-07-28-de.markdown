---
layout: post
title:  "설계 구조 및 기본 동작 과정"
---
## HappyProg 자바 패키지 구조

 ![Gatok Jekyll Theme]({{site.baseurl}}/images/class.png)


## HappyProg DB 모델링

 ![Gatok Jekyll Theme]({{site.baseurl}}/images/db2.PNG)
 
## SPRING MVC 동작 과정
 클라이언트가 서버에 어떤 요청을 하면 스프링에서 제공하는 DispatcherServlet라는 Front-Controller가 요청을 가로챈다. 
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-1.PNG)
 
 요청을 가로챈 DispatcherServlet은 HandlerMapping에게 어떤 컨트롤러에게 요청을 위임할지 물어본다.
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-2.PNG)

 요청에 Mapping된 컨트롤러가 있다면 @RequestMapping을 통하여 요청을 처리할 Method로 전달한다.
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-3.PNG)
 
 컨트롤러에서는 해당 요청을 처리할 서비스를 주입 받아 비즈니스 로직을 서비스에게 위임한다.
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-4.PNG)
 
 서비스는 요청에 필요한 작업을 대부분 담당하며 DB 접근이 필요하면, DAO를 주입받아 DB 처리는 DAO에게 위임한다.<br>
 하지만 본 프로젝트는 전통적인 DAO대신 편리성이 좋은 Mybatis의 Mapper를 통해 SQL쿼리를 날려 DB의 정보를 받아 다시 서비스에게 전달한다.<br>
 (쿼리의 결과는 VO에 담아서 주고 받는다.)<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-5.PNG)<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-6.PNG)<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-7.PNG)
 
 모든 로직을 끝낸 서비스가 결과를 컨트롤러에게 넘긴다.<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-9.PNG)
  
 결과를 받은 컨트롤러는 Model 객체에 결과물을 어떤 View(JSP)에 보여줄 것인지를 정보에 담아 DispatcherServlet에게 보낸다.
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-8.PNG)
 
 DispatcherServlet은 ViewResolver에게 받은 View에 대한 정보를 넘긴다.
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-10.PNG)
 
 ViewResolver는 해당 JSP를 찾아서 DispatcherServlet에게 알려준다.
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-11.PNG)
 
 DispatcherServlet은 응답할 View에게 Render를 지시하고 View는 응답 로직을 처리한다.<br>
 결과적으로 DispatcherServlet이 클라이언트에게 렌더링된 View를 응답한다.<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/1-12.PNG)
 
