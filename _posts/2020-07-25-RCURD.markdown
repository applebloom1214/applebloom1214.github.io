---
layout: post
title:  "주요 기능 - 댓글 CURD"
---
## ※ 개관

 ![Gatok Jekyll Theme]({{site.baseurl}}/images/4-1.png)<br>
<br>
댓글 등록은 게시판과는 다르게 AJAX를 이용하여 비동기 방식으로 구현하였다.<br>
<br>
## ※ 댓글등록(CREATE) 동작 과정 및 주요 메소드<br>
 ■ 댓글등록 요청 > 컨트롤러 > 서비스 & 구현 > Mybatis(DAO구현) > DB > 컨트롤러 > VIEW로 반환<br> 
 <br>
 댓글 CURD 공통처리<br>
 ~~~c
 // reply.js(js 파일을 따로 작성하여 모듈화를 통해 코드 간소화를 꾀함)
 	function add(reply, callback, error) {
		console.log("add reply...............");

		$.ajax({
			type : 'post',
			url : '/replies/new',
			data : JSON.stringify(reply), // 사용자가 입력한 데이타를 JSON으로 변환
			contentType : "application/json; charset=utf-8",
			success : function(result, status, xhr) {
				if (callback) {
					callback(result);
				}
			},
			error : function(xhr, status, er) {
				if (error) {
					error(er);
				}
			}
		})
	}//add
 ~~~
 <br>
 리플 등록 or 삭제시 DB 트랜잭션 처리<br>
 ~~~c
 //ReplyServiceImpl.java
@Transactional // 트랜잭션을 도와주는 어노테이션
@Override
public int register(ReplyVO vo) {

	log.info("register......" + vo);

	// 게시글의 리플 갯수 갱신
	boardMapper.updateReplyCnt(vo.getBno(), 1);

	return mapper.insert(vo);
 // boardMapper 와 replyMapper를 동시에 사용하기에 트랜잭션이 처리를 하였다

}
 ~~~
 <br><br>
 ~~~c
 	// consumes = 외부에서 받을 데이터 형식 produces = 서버에서 리턴할 데이터 형식
	// responseentity 데이터와 함께 http 헤더의 상태 메세지 등을 같이 전달하는 용도로 사용
	// requestbody 전달된 요청(request)의 내용(body)을 이용해서 해당파라미터의 타입으로 변환을 요구
	@PreAuthorize("isAuthenticated()") //로그인된 사용자만 리플 작성 가능
	@PostMapping(value = "/new", consumes = "application/json", produces = { MediaType.TEXT_PLAIN_VALUE })
	public ResponseEntity<String> create(@RequestBody ReplyVO vo) {

		log.info("ReplyVO: " + vo);

		int insertCount = service.register(vo);

		log.info("Reply INSERT COUNT: " + insertCount);

		return insertCount == 1 ? new ResponseEntity<>("success", HttpStatus.OK)
				: new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); //리플 등록이 정상적으로 끝나면 성공 신호를 보낸다
	}
 ~~~
 <br>
 <br>
## ※ 댓글읽기(READ) 동작 과정 및 주요 메소드<br>
 ■ 댓글읽기 요청 > 컨트롤러 > 서비스 & 구현 > Mybatis(DAO구현) > DB > 컨트롤러 > VIEW로 반환<br> 
 <br>
 리플 페이징 처리<br>
 ~~~c
 //ReplyServiceImpl.java
   @Override
  public ReplyPageDTO getListPage(Criteria cri, Long bno) {
                               //댓글 또한 게시판의 Criteria 이용하여 페이징 처리
    return new ReplyPageDTO(
        mapper.getCountByBno(bno), //해당 게시글에 달린 댓글수를 구함
        mapper.getListWithPaging(cri, bno)); // 댓글수를 토대로 페이징 처리를 하여 댓글을 읽어온다
  }
 ~~~
 <br>
 <br>
## ※ 댓글수정&삭제(UPDATE & DELETE) 동작 과정 및 주요 메소드<br>
 ■ 댓글수정OR삭제 요청 > 컨트롤러 > 서비스 & 구현 > Mybatis(DAO구현) > DB > 컨트롤러 > VIEW로 반환<br> 
 <br>
 컨트롤러 매핑 처리<br>
 ~~~c
 //ReplyController.java
 @PreAuthorize("principal.username == #vo.replyer")
	@DeleteMapping("/{rno}") // 삭제는 DELETE 방식으로 매핑 
	public ResponseEntity<String> remove(@RequestBody ReplyVO vo, @PathVariable("rno") Long rno) {... }
 
 //ReplyController.java
 @PreAuthorize("principal.username == #vo.replyer")
	@RequestMapping(method = { RequestMethod.PUT, RequestMethod.PATCH }, value = // 수정은 PUT 방식으로 매핑
	  "/{rno}", consumes = "application/json", produces = {MediaType.TEXT_PLAIN_VALUE }) 
	  public ResponseEntity<String> modify( @RequestBody ReplyVO vo, @PathVariable("rno") Long rno) {...}
 ~~~
 <br>
 <br>
  
## ※ 실기 영상<br>
 리플등록<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/4-1.gif)
 <br><br>
 리플읽기,수정,삭제<br>
 ![Gatok Jekyll Theme]({{site.baseurl}}/images/4-2.gif)
